#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE sql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via sql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void sql_restart (FILE *input_file ,yyscan_t yyscanner );
void sql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE sql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void sql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void sql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void sql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void sql_pop_buffer_state (yyscan_t yyscanner );

static void sql_ensure_buffer_stack (yyscan_t yyscanner );
static void sql__load_buffer_state (yyscan_t yyscanner );
static void sql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER sql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE sql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE sql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE sql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *sql_alloc (yy_size_t ,yyscan_t yyscanner );
void *sql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void sql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer sql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        sql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            sql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        sql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            sql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define sql_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 121
#define YY_END_OF_BUFFER 122
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[790] =
    {   0,
        0,    0,    2,    2,  122,  120,    4,    4,  120,  113,
      120,  113,  113,  116,  113,  113,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  119,    1,  115,  114,
      116,  111,  110,  112,  118,  118,  118,  118,  118,  101,
      118,  102,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  103,  104,  105,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  106,  107,  108,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  109,  118,  118,  118,  118,  118,  118,
      118,    2,    2,    2,    2,    2,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      117,  114,   87,  118,   88,  118,   89,   90,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   91,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,   92,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,   93,  118,  118,   94,  118,
      118,  118,  118,  118,  118,  118,   95,  118,   96,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   97,  118,

      118,  118,  118,   98,  118,  118,   99,  118,  118,  118,
      100,  118,  118,  118,  118,  118,  118,  118,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,  118,  118,  118,  118,
       64,  118,   86,  118,  118,  118,  118,  118,  118,   65,
      118,  118,  118,  118,   66,  118,  118,  118,   67,  118,
      118,  118,  118,   68,   69,   70,  118,  118,   71,  118,
       72,  118,  118,  118,  118,  118,   73,  118,   74,   75,
       76,   77,  118,  118,  118,  118,   78,  118,  118,  118,
       79,   80,  118,  118,  118,  118,  118,   81,  118,  118,
      118,   82,   83,  118,  118,  118,  118,  118,  118,  118,
       84,  118,  118,   85,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   46,   47,  118,  118,  118,   63,  118,  118,
      118,   48,  118,  118,  118,  118,   49,  118,  118,  118,
      118,  118,  118,  118,  118,   50,  118,  118,   51,   52,
      118,  118,  118,   53,   54,   55,  118,  118,   56,   57,

      118,  118,   58,  118,  118,  118,  118,   59,   60,  118,
      118,  118,   61,  118,  118,  118,   62,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   23,  118,  118,   24,  118,   25,  118,  118,
      118,   26,   27,  118,   28,   29,   30,   31,  118,   32,
       33,  118,   34,  118,   35,  118,   36,  118,   37,   38,

       39,   40,  118,   41,   42,   43,   44,   45,  118,  118,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    8,    9,
       10,   11,  118,   12,   13,  118,   14,   15,   16,   17,
       18,   19,   20,   22,   21,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    7,    6,    2,    2,    5,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   38,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[797] =
    {   0,
        0,    0,   64,    0,  399, 3149,  127,  129,    0, 3149,
      392,  390,  386,  125,  124,  383,  121,  121,  173,  219,
      110,  121,  119,  140,  164,  113,  127,  170,  175,  188,
      208,  220,    0,  181,  263,  306,  226,  195,  136,    0,
      157,  160,  353,    0,  346,  333,  328,  197,  199,  323,
      360,  418,  470,  522,  238,  570,  291,  249,  618,  287,
      292,  295,  352,  670,  718,  770,  346,  400,  820,  872,
      920,  421,  429,  285,  302,  294, 3149, 3149,  283,  247,
      286, 3149, 3149, 3149,    0,  134,  180,  213,  242,  283,
      356,    0,  351,  286,  353,  416,  277,  321,  457,  410,

      325,  354,  372,  463,  388,  397,  405,  412,  420,  425,
      455,  472,    0,  505,  427,  471,  458,  478,  483,  525,
      490,  500,  497,  509,  518,  526,    0,  529,  514,  520,
      538,  533,  529,  538,  541,  551,  547,  555,  576,  576,
      568,  557,  569,  567,  575,  582,  594,  607,  615,  589,
      581,    0,  342,  247,  241,    0,    0,  198,  190,  384,
        0,    0,    0,  624,  630,  649,  667,  679,  675,  683,
      661,  721,  716,  733,  737,  732,  772,  970,  775,  778,
      824,  808, 1020,  832,  843,  854,  853,  878,  906,  894,
      928,  724, 1069,  877,  932,  945,  980,  976, 1014,  986,

     1016, 1015, 1029, 1046, 1054,  946, 1065, 1079, 1077, 1102,
      974, 1100, 1113, 1128, 1123, 1134, 1119, 1156, 1167, 1162,
     1153, 1177, 1190, 1188, 1206, 1198, 1223, 1207, 1211, 1240,
     3149,  185,    0,  612,    0,  626,    0,    0,  621,  615,
      628,  638,  710,  731,  757,  767,  789,  772,    0,  927,
      807,  852, 1241,  864,  885,  902,  925,  919,  964,  962,
     1018, 1041, 1060,    0, 1100, 1107, 1121, 1135, 1183, 1217,
     1224, 1227, 1244, 1246, 1249, 1251, 1236, 1250,    0, 1247,
     1264, 1266, 1276, 1272, 1259, 1261,    0, 1273, 1267, 1284,
     1285, 1275, 1284, 1286, 1299, 1293, 1297, 1298,    0, 1282,

     1288, 1290, 1299,    0, 1294, 1310,    0, 1303, 1304, 1320,
        0, 1309, 1303, 1328, 1310, 1314, 1318, 1331,    0,  180,
     1339, 1344, 1347, 1348, 1349, 1350, 1352, 1360, 1381, 1365,
     1393, 1384, 1398, 1402, 1423, 1410, 1427, 1436, 1435, 1438,
     1452, 1471, 1448, 1473, 1481, 1486, 1484, 1489, 1503, 1512,
     1502, 1514, 1527, 1538, 1540, 1553, 1548, 1566, 1556, 1579,
     1557, 1581, 1582, 1605, 1591, 1610, 1616, 1620, 1624, 1649,
     1645, 1653, 1650, 1658, 1659, 1683, 1684, 1661, 1687, 1709,
     1712, 1715, 1699, 1713, 1718, 1727, 1737, 1749, 1753, 1755,
     1771, 1752, 1766, 1763, 1787, 1809, 1806, 1815, 1803, 1831,

     1812, 1827, 1845, 1849, 1857, 1841, 1360, 1413, 1447, 1525,
        0, 1567,    0, 1606, 1619, 1620, 1649, 1744, 1764,    0,
     1769, 1844, 1851, 1877,    0, 1877, 1875, 1873,    0, 1870,
     1871, 1868, 1889,    0,    0,    0, 1890, 1878,    0, 1885,
        0, 1885, 1879, 1886, 1888, 1901,    0, 1898,    0,    0,
        0,    0, 1904, 1914, 1901, 1904,    0, 1918, 1906, 1907,
        0,    0, 1927, 1916, 1912, 1921, 1933,    0, 1933, 1930,
     1935,    0,    0, 1927, 1921, 1943, 1925, 1941, 1948, 1946,
        0, 1936, 1953,    0, 1965, 1968, 1969, 1957, 1971, 1987,
     1973, 1997, 1986, 2019, 2011, 2022, 2028, 2023, 2027, 2040,

     2057, 2041, 2051, 2081, 2076, 2082, 2065, 2094, 2100, 2095,
     2130, 2097, 2113, 2119, 2135, 2125, 2134, 2156, 2148, 2159,
     2151, 2167, 2188, 2189, 2173, 2204, 2185, 2190, 2199, 2202,
     2223, 2213, 2225, 2221, 2227, 2242, 2258, 2263, 2253, 2255,
     2281, 2259, 2292, 2291, 2295, 2296, 2297, 2309, 2321, 2325,
     2327, 2337, 2333, 2335, 2350, 2359, 2351, 2363, 2367, 2369,
     2375, 2381,    0,    0, 1972, 1974, 2003,    0, 2082, 2277,
     2391,    0, 2403, 2404, 2396, 2404,    0, 2390, 2398, 2409,
     2411, 2398, 2401, 2413, 2412,    0, 2418, 2408,    0,    0,
     2408, 2424, 2418,    0,    0,    0, 2433, 2418,    0,    0,

     2422, 2437,    0, 2443, 2426, 2444, 2449, 2435,    0, 2453,
     2455, 2455,    0, 2443, 2462, 2463,    0, 2463, 2467, 2469,
     2471, 2475, 2473, 2479, 2497, 2492, 2503, 2508, 2509, 2533,
     2521, 2525, 2527, 2537, 2538, 2543, 2551, 2561, 2579, 2587,
     2562, 2595, 2591, 2576, 2592, 2605, 2613, 2628, 2616, 2617,
     2629, 2645, 2646, 2630, 2651, 2654, 2659, 2669, 2684, 2670,
     2683, 2695, 2699, 2700, 2705, 2724, 2708, 2714, 2729, 2737,
     2758, 2739,    0, 2550, 2600, 2707, 2729,    0, 2724, 2738,
     2738,    0,    0, 2764,    0,    0,    0,    0, 2758,    0,
        0, 2748,    0, 2756,    0, 2766,    0, 2754,    0, 2761,

        0,    0, 2770,    0,    0,    0,    0,    0, 2766, 2775,
     2783, 2788, 2787, 2798, 2813, 2799, 2817, 2816, 2841, 2822,
     2828, 2853, 2832, 2854, 2857, 2862, 2867, 2865, 2866, 2870,
     2871, 2895, 2896, 2899, 2905, 2907, 2910, 2924, 2920, 2921,
     2929, 2939, 2950, 2953, 2955, 2958, 2961, 2972,    0,    0,
        0,    0, 2811,    0,    0, 2945,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 2964, 2969, 2983, 2993, 2994,
     2995, 2998, 3009, 3007, 3012, 3017, 3023, 3026, 3028, 3038,
     3047, 3049, 2990,    0, 3052, 3057,    0, 3060, 3149, 3124,
     3128,  151, 3132, 3136, 3140, 3144

    } ;

static yyconst flex_int16_t yy_def[797] =
    {   0,
      789,    1,  789,    3,  789,  789,  789,  789,  790,  789,
      791,  789,  789,  789,  789,  789,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  793,
      793,  789,  794,  793,  795,  793,  793,  793,  793,  793,
      796,  796,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  789,  790,  791,  789,  789,  789,  789,
      789,  789,  789,  789,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,

      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  793,  793,  794,  795,  793,  793,  793,  793,  793,
      793,  793,  793,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      789,  789,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,

      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  793,  793,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,

      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,

      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  792,  792,   52,   52,  792,   52,    0,  789,
      789,  789,  789,  789,  789,  789

    } ;

static yyconst flex_int16_t yy_nxt[3214] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   33,   33,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   44,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   67,

       67,   67,   40,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   67,   67,   74,   74,
       74,   74,   80,   81,   82,   83,   86,   91,   87,  116,
      103,  105,  109,  117,   88,  104,   89,  106,  110,  233,
      107,   90,  111,  108,   85,  150,  151,   92,  153,   74,
      112,   74,   74,   86,   91,   87,  116,  103,  105,  109,
      117,   88,  104,   89,  106,  110,  233,  107,   90,  111,
      108,  113,  150,  151,   92,   93,  118,  112,  320,  114,
      119,  121,   94,  232,  115,  122,  120,  133,  320,   95,

      123,  134,   96,   97,  159,  160,  158,  148,  113,  161,
      162,  234,   93,  118,  124,  149,  114,  119,  121,   94,
      125,  115,  122,  120,  133,  126,   95,  123,  134,   96,
       97,   98,  130,  127,  148,   99,  235,  128,  234,  100,
      129,  124,  149,  131,  236,  101,  156,  125,  102,  132,
      319,  145,  126,  146,  164,  232,  147,  237,   98,  130,
      127,  190,   99,  235,  128,  164,  100,  129,  182,  191,
      131,  236,  101,  183,  164,  102,  132,  135,  145,  136,
      146,  164,  137,  147,  237,  164,   74,   74,  190,  138,
      139,   79,  164,   80,   81,  182,  191,  238,  243,   77,

      183,  164,  244,  164,  135,  231,  136,  164,  196,  137,
      249,  197,  164,  195,  188,  198,  138,  139,  140,  141,
      189,  199,  142,  164,  238,  243,  143,  164,  164,  244,
      164,  164,  144,  163,  164,  196,  158,  249,  197,  157,
      195,  188,  198,  153,   74,  140,  141,  189,  199,  142,
      164,  156,  250,  143,  164,  164,  152,  257,  164,  144,
      152,  152,  164,  152,  152,  152,  152,  152,  200,  152,
      152,  152,  201,  239,  241,  165,  245,  166,  246,  250,
      258,  242,  164,  167,  257,  168,  259,  240,  164,  164,
      169,  159,  160,   84,   79,  200,   78,   77,  789,  201,

      239,  241,  165,  245,  166,  246,  789,  258,  242,  164,
      167,  263,  168,  259,  240,  164,  212,  169,  152,  152,
      213,  152,  152,  152,  152,  152,  264,  152,  152,  152,
      789,  265,  247,  227,  170,  266,  164,  164,  263,  255,
      256,  228,  248,  212,  789,  164,  267,  213,  229,  230,
      789,  268,  277,  264,  171,  789,  789,  164,  265,  247,
      227,  170,  266,  164,  164,  164,  255,  256,  228,  248,
      789,  251,  164,  267,  252,  229,  230,  260,  268,  277,
      253,  171,  172,  261,  164,  269,  164,  254,  270,  173,
      262,  278,  164,  789,  279,  280,  174,  271,  251,  175,

      176,  252,  272,  789,  260,  281,  164,  253,  789,  172,
      261,  789,  269,  164,  254,  270,  173,  262,  278,  284,
      273,  279,  280,  174,  271,  285,  175,  176,  286,  272,
      274,  789,  281,  164,  177,  275,  276,  282,  178,  283,
      287,  288,  179,  289,  290,  291,  284,  273,  180,  292,
      293,  181,  285,  294,  295,  286,  296,  274,  164,  789,
      297,  177,  275,  276,  282,  178,  283,  287,  288,  179,
      289,  290,  291,  300,  298,  180,  292,  293,  181,  789,
      294,  295,  299,  296,  301,  164,  164,  297,  302,  303,
      184,  304,  305,  306,  307,  308,  185,  310,  309,  186,

      300,  298,  187,  789,  789,  317,  164,  789,  789,  299,
      311,  301,  318,  164,  312,  302,  303,  184,  304,  305,
      306,  307,  308,  185,  310,  309,  186,  789,  407,  187,
      313,  315,  317,  164,  164,  192,  314,  311,  789,  318,
      164,  312,  408,  193,  316,  321,  164,  409,  194,  410,
      789,  411,  412,  789,  164,  407,  789,  313,  315,  789,
      164,  164,  192,  314,  789,  164,  164,  164,  789,  408,
      193,  316,  321,  164,  409,  194,  410,  164,  411,  412,
      322,  164,  202,  164,  789,  164,  164,  164,  789,  326,
      323,  164,  164,  164,  325,  164,  203,  164,  324,  164,

      327,  789,  204,  164,  164,  789,  164,  322,  789,  202,
      164,  164,  164,  164,  328,  164,  326,  323,  164,  164,
      789,  325,  164,  203,  164,  324,  164,  327,  331,  204,
      164,  789,  332,  164,  164,  205,  789,  164,  164,  413,
      164,  328,  164,  206,  329,  414,  164,  207,  164,  164,
      208,  330,  164,  335,  164,  331,  333,  164,  334,  332,
      164,  164,  205,  336,  164,  337,  413,  164,  164,  164,
      206,  329,  414,  164,  207,  164,  164,  208,  330,  164,
      335,  164,  209,  333,  164,  334,  164,  164,  164,  415,
      336,  164,  337,  210,  164,  164,  164,  789,  416,  211,

      164,  417,  418,  338,  343,  344,  164,  789,  164,  209,
      345,  164,  789,  164,  164,  164,  415,  789,  164,  789,
      210,  164,  347,  789,  164,  416,  211,  421,  417,  418,
      338,  343,  344,  164,  214,  164,  215,  345,  164,  216,
      164,  164,  789,  789,  164,  789,  217,  218,  164,  347,
      346,  164,  789,  789,  421,  351,  164,  789,  789,  164,
      164,  214,  789,  215,  422,  789,  216,  164,  164,  164,
      164,  164,  352,  217,  218,  164,  354,  346,  425,  164,
      353,  789,  351,  164,  219,  220,  164,  164,  221,  164,
      164,  422,  222,  164,  164,  164,  164,  164,  223,  352,

      789,  426,  365,  354,  355,  425,  164,  353,  164,  789,
      164,  219,  220,  164,  164,  221,  164,  164,  789,  222,
      164,  164,  164,  789,  357,  223,  789,  358,  426,  365,
      164,  355,  356,  427,  789,  164,  164,  164,  428,  419,
      164,  164,  164,  420,  164,  224,  429,  225,  164,  164,
      226,  357,  366,  359,  358,  789,  164,  164,  360,  356,
      427,  164,  164,  164,  164,  428,  419,  789,  164,  164,
      420,  164,  224,  429,  225,  164,  430,  226,  431,  366,
      359,  367,  164,  164,  339,  360,  164,  340,  164,  164,
      164,  164,  164,  341,  382,  164,  164,  368,  369,  789,

      342,  789,  164,  430,  789,  431,  164,  789,  367,  164,
      164,  339,  164,  164,  340,  372,  164,  164,  789,  164,
      341,  382,  164,  164,  368,  369,  370,  342,  371,  164,
      164,  164,  164,  164,  348,  789,  164,  164,  789,  164,
      349,  373,  372,  164,  789,  164,  374,  350,  432,  164,
      164,  164,  164,  370,  789,  371,  164,  164,  164,  164,
      375,  348,  164,  164,  433,  164,  789,  349,  373,  376,
      164,  377,  164,  374,  350,  432,  434,  164,  164,  164,
      378,  164,  164,  164,  361,  164,  789,  375,  789,  164,
      164,  433,  164,  164,  362,  164,  376,  164,  377,  363,

      364,  164,  789,  434,  789,  164,  380,  378,  164,  164,
      379,  361,  164,  164,  381,  164,  164,  164,  164,  789,
      164,  362,  164,  789,  435,  383,  363,  364,  164,  164,
      436,  384,  164,  380,  437,  164,  164,  379,  164,  164,
      164,  381,  164,  164,  164,  164,  386,  385,  389,  164,
      164,  435,  383,  789,  387,  164,  164,  436,  384,  164,
      388,  437,  164,  164,  164,  164,  164,  438,  390,  164,
      164,  164,  164,  386,  385,  389,  164,  164,  164,  789,
      391,  387,  164,  164,  789,  392,  164,  388,  393,  164,
      789,  164,  164,  164,  438,  390,  164,  164,  164,  164,

      789,  394,  439,  164,  164,  164,  164,  391,  396,  789,
      164,  397,  392,  164,  399,  393,  164,  395,  400,  164,
      164,  398,  164,  403,  164,  164,  164,  405,  394,  439,
      164,  164,  789,  164,  164,  396,  404,  440,  397,  164,
      164,  399,  164,  164,  395,  400,  401,  164,  398,  164,
      403,  164,  402,  164,  405,  441,  164,  423,  442,  164,
      443,  164,  444,  404,  440,  445,  164,  446,  448,  164,
      164,  406,  424,  401,  164,  449,  164,  447,  450,  402,
      451,  452,  441,  164,  423,  442,  164,  443,  453,  444,
      454,  455,  445,  456,  446,  448,  457,  458,  406,  424,

      459,  460,  449,  164,  447,  450,  461,  451,  452,  462,
      463,  464,  465,  466,  467,  453,  468,  454,  455,  469,
      456,  470,  471,  457,  458,  472,  473,  459,  460,  474,
      476,  475,  477,  461,  478,  479,  462,  463,  464,  465,
      466,  467,  480,  468,  481,  482,  469,  483,  470,  471,
      484,  789,  472,  473,  789,  164,  474,  476,  475,  477,
      485,  478,  479,  164,  486,  164,  164,  789,  164,  480,
      789,  481,  482,  789,  483,  164,  164,  484,  487,  490,
      164,  164,  164,  164,  164,  164,  164,  485,  164,  563,
      164,  486,  164,  164,  488,  164,  164,  164,  492,  789,

      164,  164,  164,  164,  489,  487,  490,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  563,  164,  164,  789,
      164,  488,  491,  164,  164,  492,  164,  164,  164,  164,
      493,  489,  789,  494,  164,  495,  164,  789,  164,  164,
      496,  164,  564,  164,  164,  164,  164,  164,  497,  491,
      500,  164,  498,  164,  164,  499,  164,  493,  789,  164,
      494,  164,  495,  164,  504,  164,  164,  496,  501,  564,
      164,  164,  164,  164,  164,  497,  565,  500,  164,  498,
      789,  164,  499,  502,  164,  503,  164,  164,  164,  164,
      164,  504,  789,  789,  506,  501,  508,  164,  164,  164,

      164,  164,  164,  565,  505,  509,  789,  164,  789,  164,
      502,  164,  503,  507,  164,  164,  164,  164,  512,  164,
      164,  506,  164,  508,  164,  164,  789,  164,  164,  164,
      164,  505,  509,  510,  164,  511,  164,  789,  164,  164,
      507,  566,  789,  164,  164,  512,  164,  164,  164,  164,
      164,  513,  164,  515,  164,  164,  164,  164,  789,  789,
      510,  514,  511,  164,  164,  164,  164,  517,  566,  164,
      164,  789,  164,  521,  164,  164,  164,  164,  513,  567,
      515,  164,  164,  164,  164,  516,  518,  519,  514,  164,
      164,  164,  164,  164,  517,  164,  164,  522,  523,  164,

      521,  164,  164,  164,  789,  789,  567,  164,  789,  164,
      520,  164,  516,  518,  519,  164,  164,  164,  164,  164,
      164,  524,  164,  526,  522,  523,  164,  164,  568,  164,
      789,  525,  164,  789,  164,  527,  164,  520,  789,  789,
      529,  164,  164,  569,  164,  164,  164,  789,  524,  570,
      526,  528,  164,  164,  164,  568,  164,  531,  525,  164,
      164,  164,  527,  164,  530,  164,  164,  529,  164,  164,
      569,  532,  789,  164,  164,  164,  570,  537,  528,  164,
      571,  164,  533,  164,  531,  164,  164,  164,  164,  164,
      534,  530,  164,  164,  164,  164,  164,  164,  532,  164,

      164,  164,  164,  538,  537,  789,  535,  571,  164,  533,
      789,  542,  164,  164,  536,  164,  164,  534,  789,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      538,  164,  543,  535,  544,  164,  789,  540,  542,  541,
      539,  536,  164,  545,  789,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  789,  164,  543,
      789,  544,  164,  164,  540,  164,  541,  539,  164,  164,
      545,  164,  164,  164,  572,  164,  164,  573,  164,  551,
      164,  164,  164,  546,  547,  164,  548,  164,  164,  164,
      164,  164,  164,  574,  549,  164,  164,  550,  164,  164,

      164,  572,  164,  164,  573,  789,  551,  164,  789,  164,
      546,  547,  164,  548,  164,  164,  164,  789,  164,  164,
      574,  549,  164,  164,  550,  164,  164,  555,  164,  164,
      164,  164,  554,  789,  164,  552,  789,  553,  789,  164,
      789,  558,  164,  164,  557,  164,  164,  164,  164,  164,
      164,  164,  164,  789,  555,  164,  556,  164,  164,  554,
      562,  164,  552,  164,  553,  164,  164,  164,  558,  164,
      164,  557,  164,  164,  164,  164,  575,  164,  164,  559,
      560,  164,  576,  556,  164,  164,  561,  562,  164,  577,
      164,  578,  164,  164,  164,  579,  580,  581,  582,  583,

      164,  584,  585,  575,  164,  586,  559,  560,  164,  576,
      587,  588,  164,  561,  589,  590,  577,  591,  578,  592,
      164,  593,  579,  580,  581,  582,  583,  594,  584,  585,
      595,  596,  586,  597,  598,  599,  600,  587,  588,  601,
      602,  589,  590,  603,  591,  604,  592,  605,  593,  606,
      607,  608,  609,  610,  594,  611,  612,  595,  596,  613,
      597,  598,  599,  600,  614,  615,  601,  602,  616,  617,
      603,  789,  604,  621,  605,  789,  606,  607,  608,  609,
      610,  164,  611,  612,  164,  164,  613,  164,  673,  164,
      674,  614,  615,  164,  618,  616,  617,  619,  620,  622,

      621,  164,  164,  164,  164,  164,  789,  164,  164,  164,
      624,  164,  164,  164,  164,  673,  164,  674,  675,  623,
      164,  618,  164,  164,  619,  620,  622,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  624,  164,  164,
      164,  628,  626,  164,  164,  675,  623,  164,  625,  164,
      164,  629,  627,  632,  164,  164,  164,  164,  164,  164,
      164,  789,  164,  164,  164,  164,  164,  164,  628,  626,
      164,  164,  630,  164,  164,  625,  164,  164,  629,  627,
      632,  164,  164,  164,  164,  164,  164,  164,  631,  789,
      164,  164,  164,  164,  164,  633,  634,  164,  164,  630,

      164,  164,  789,  164,  164,  635,  789,  676,  164,  789,
      164,  164,  164,  164,  164,  631,  164,  164,  164,  164,
      164,  636,  633,  634,  164,  164,  638,  637,  164,  164,
      164,  164,  635,  164,  676,  164,  164,  164,  164,  164,
      164,  164,  639,  164,  164,  164,  164,  640,  636,  164,
      164,  164,  641,  638,  637,  164,  164,  164,  164,  789,
      164,  164,  164,  164,  164,  789,  164,  164,  164,  639,
      164,  164,  164,  164,  640,  164,  164,  164,  164,  641,
      789,  642,  164,  164,  164,  643,  644,  164,  164,  164,
      789,  164,  164,  164,  164,  164,  645,  164,  164,  164,

      789,  164,  164,  164,  164,  164,  164,  647,  642,  164,
      164,  164,  643,  644,  164,  164,  164,  646,  164,  164,
      164,  164,  164,  645,  164,  164,  164,  648,  164,  650,
      164,  164,  164,  164,  647,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  646,  164,  649,  164,  164,  164,
      652,  164,  164,  164,  648,  651,  650,  164,  653,  164,
      789,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  789,  649,  164,  164,  164,  652,  164,  164,
      789,  789,  651,  657,  164,  653,  164,  654,  164,  164,
      164,  164,  655,  656,  164,  164,  164,  164,  164,  164,

      789,  164,  164,  677,  789,  164,  164,  164,  164,  660,
      657,  164,  164,  661,  654,  659,  164,  164,  164,  655,
      656,  164,  164,  658,  164,  164,  164,  164,  164,  662,
      677,  164,  164,  164,  164,  164,  660,  663,  164,  164,
      661,  164,  659,  164,  164,  164,  789,  666,  789,  164,
      658,  164,  164,  164,  164,  164,  662,  164,  164,  164,
      164,  164,  664,  164,  663,  665,  164,  669,  164,  164,
      164,  164,  164,  164,  666,  164,  164,  668,  164,  164,
      164,  667,  670,  164,  164,  164,  164,  164,  164,  664,
      164,  672,  665,  164,  669,  164,  164,  164,  164,  164,

      164,  671,  164,  164,  668,  164,  164,  678,  667,  670,
      164,  164,  164,  164,  164,  679,  680,  164,  672,  681,
      682,  683,  164,  684,  164,  685,  164,  686,  671,  687,
      164,  688,  164,  689,  678,  690,  691,  692,  164,  693,
      694,  695,  679,  680,  164,  696,  681,  682,  683,  697,
      684,  698,  685,  699,  686,  700,  687,  701,  688,  702,
      689,  703,  690,  691,  692,  704,  693,  694,  695,  705,
      706,  707,  696,  708,  709,  710,  697,  789,  698,  164,
      699,  789,  700,  164,  701,  711,  702,  712,  703,  164,
      713,  164,  704,  789,  789,  164,  705,  706,  707,  164,

      708,  709,  710,  164,  714,  164,  164,  164,  716,  164,
      164,  164,  711,  164,  712,  164,  164,  713,  164,  164,
      717,  718,  164,  715,  164,  164,  164,  789,  164,  789,
      164,  714,  164,  164,  164,  716,  164,  720,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  717,  718,  164,
      715,  164,  164,  164,  723,  164,  719,  164,  721,  724,
      164,  164,  722,  164,  720,  789,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  749,  164,  164,  164,  164,
      164,  723,  725,  719,  164,  721,  724,  164,  164,  722,
      164,  726,  164,  789,  164,  164,  164,  164,  164,  727,

      164,  164,  749,  164,  164,  164,  164,  164,  164,  725,
      728,  164,  164,  729,  164,  164,  750,  789,  726,  164,
      730,  164,  164,  164,  164,  164,  727,  164,  164,  732,
      164,  164,  164,  164,  164,  164,  731,  728,  164,  164,
      729,  164,  164,  750,  164,  164,  164,  730,  164,  164,
      164,  733,  164,  164,  164,  164,  732,  734,  164,  164,
      164,  164,  164,  731,  164,  164,  164,  164,  164,  789,
      164,  164,  164,  164,  789,  737,  164,  735,  733,  164,
      164,  164,  164,  736,  734,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  738,  164,  740,  164,

      164,  739,  737,  789,  735,  164,  164,  741,  164,  164,
      736,  164,  164,  164,  164,  164,  164,  164,  789,  164,
      164,  743,  164,  738,  745,  740,  164,  164,  739,  742,
      164,  164,  164,  164,  741,  164,  164,  751,  164,  744,
      164,  164,  164,  164,  164,  164,  164,  164,  743,  747,
      164,  745,  752,  164,  753,  164,  742,  164,  164,  746,
      164,  754,  164,  164,  751,  164,  744,  164,  164,  755,
      748,  164,  164,  164,  164,  164,  747,  164,  756,  752,
      164,  753,  164,  757,  758,  759,  746,  164,  754,  760,
      761,  762,  164,  763,  164,  764,  755,  748,  765,  164,

      164,  164,  164,  767,  164,  756,  789,  789,  789,  789,
      757,  758,  759,  766,  164,  164,  760,  761,  762,  164,
      763,  164,  764,  164,  164,  765,  164,  783,  768,  164,
      767,  164,  164,  164,  164,  164,  769,  789,  164,  771,
      766,  164,  164,  789,  164,  789,  164,  770,  164,  164,
      164,  164,  164,  164,  783,  768,  164,  164,  164,  164,
      164,  164,  164,  769,  164,  164,  771,  773,  164,  164,
      164,  164,  772,  164,  770,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  789,  164,
      164,  164,  774,  164,  773,  164,  164,  164,  164,  772,

      164,  164,  164,  164,  164,  164,  775,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  789,  774,
      164,  164,  777,  164,  776,  164,  164,  789,  164,  164,
      164,  164,  164,  775,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  778,  789,  164,  164,  789,  164,  777,
      164,  776,  780,  164,  779,  164,  164,  164,  164,  164,
      164,  789,  164,  164,  164,  164,  164,  164,  164,  164,
      778,  164,  164,  164,  164,  164,  784,  164,  789,  780,
      164,  779,  164,  164,  164,  164,  164,  164,  164,  164,
      781,  164,  164,  164,  164,  782,  164,  164,  164,  164,

      164,  164,  164,  784,  164,  164,  789,  164,  164,  164,
      785,  164,  164,  164,  164,  164,  164,  781,  164,  164,
      787,  164,  782,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  785,  164,  164,
      786,  164,  164,  164,  164,  164,  164,  787,  164,  789,
      164,  789,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  786,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  789,  789,  789,
      164,  164,  788,  164,  789,  164,  164,  789,  164,  164,
      164,  164,  164,  164,  789,  164,  164,  789,  789,  789,

      164,  164,  789,  164,  789,  789,  789,  789,  789,  788,
      164,  789,  164,  789,  789,  164,  789,  789,  789,  789,
      164,  789,  789,  164,   75,  789,  789,   75,   76,  789,
       76,   76,  152,  789,  152,  152,  154,  789,  154,  154,
      155,  789,  155,  155,  164,  789,  164,  164,    5,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789
    } ;

static yyconst flex_int16_t yy_chk[3214] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    7,    7,
        8,    8,   14,   14,   15,   15,   17,   18,   17,   26,
       21,   22,   23,   27,   17,   21,   17,   22,   23,   86,
       22,   17,   24,   22,  792,   39,   39,   18,   41,   41,
       24,   42,   42,   17,   18,   17,   26,   21,   22,   23,
       27,   17,   21,   17,   22,   23,   86,   22,   17,   24,
       22,   25,   39,   39,   18,   19,   28,   24,  320,   25,
       28,   29,   19,  232,   25,   29,   28,   34,  159,   19,

       30,   34,   19,   19,   48,   48,  158,   38,   25,   49,
       49,   87,   19,   28,   30,   38,   25,   28,   29,   19,
       30,   25,   29,   28,   34,   31,   19,   30,   34,   19,
       19,   20,   32,   31,   38,   20,   88,   31,   87,   20,
       31,   30,   38,   32,   88,   20,  155,   30,   20,   32,
      154,   37,   31,   37,   55,   80,   37,   89,   20,   32,
       31,   58,   20,   88,   31,   58,   20,   31,   55,   58,
       32,   88,   20,   55,   55,   20,   32,   35,   37,   35,
       37,   55,   35,   37,   89,   58,   74,   74,   58,   35,
       35,   79,   58,   81,   81,   55,   58,   90,   94,   76,

       55,   55,   94,   60,   35,   75,   35,   57,   61,   35,
       97,   62,   58,   60,   57,   62,   35,   35,   36,   36,
       57,   62,   36,   60,   90,   94,   36,   57,   61,   94,
       60,   62,   36,   50,   57,   61,   47,   97,   62,   46,
       60,   57,   62,  153,  153,   36,   36,   57,   62,   36,
       60,   45,   98,   36,   57,   61,   43,  101,   62,   36,
       51,   51,   67,   51,   51,   51,   51,   51,   63,   51,
       51,   51,   63,   91,   93,   51,   95,   51,   95,   98,
      102,   93,   67,   51,  101,   51,  103,   91,   63,   67,
       51,  160,  160,   16,   13,   63,   12,   11,    5,   63,

       91,   93,   51,   95,   51,   95,    0,  102,   93,   67,
       51,  105,   51,  103,   91,   63,   68,   51,   52,   52,
       68,   52,   52,   52,   52,   52,  106,   52,   52,   52,
        0,  107,   96,   72,   52,  108,   68,   72,  105,  100,
      100,   72,   96,   68,    0,   73,  109,   68,   73,   73,
        0,  110,  115,  106,   52,    0,    0,   72,  107,   96,
       72,   52,  108,   68,   72,   73,  100,  100,   72,   96,
        0,   99,   73,  109,   99,   73,   73,  104,  110,  115,
       99,   52,   53,  104,   72,  111,   53,   99,  111,   53,
      104,  116,   73,    0,  117,  118,   53,  112,   99,   53,

       53,   99,  112,    0,  104,  119,   53,   99,    0,   53,
      104,    0,  111,   53,   99,  111,   53,  104,  116,  121,
      114,  117,  118,   53,  112,  122,   53,   53,  123,  112,
      114,    0,  119,   53,   54,  114,  114,  120,   54,  120,
      124,  125,   54,  126,  128,  129,  121,  114,   54,  130,
      131,   54,  122,  132,  133,  123,  134,  114,   54,    0,
      135,   54,  114,  114,  120,   54,  120,  124,  125,   54,
      126,  128,  129,  137,  136,   54,  130,  131,   54,    0,
      132,  133,  136,  134,  138,   54,   56,  135,  139,  140,
       56,  141,  142,  143,  144,  145,   56,  146,  145,   56,

      137,  136,   56,    0,    0,  150,   56,    0,    0,  136,
      147,  138,  151,   56,  147,  139,  140,   56,  141,  142,
      143,  144,  145,   56,  146,  145,   56,    0,  234,   56,
      148,  149,  150,   56,   59,   59,  148,  147,    0,  151,
      164,  147,  236,   59,  149,  165,  165,  239,   59,  240,
        0,  241,  242,    0,   59,  234,    0,  148,  149,    0,
      164,   59,   59,  148,    0,  166,  165,  164,    0,  236,
       59,  149,  165,  165,  239,   59,  240,  171,  241,  242,
      166,   59,   64,  167,    0,  166,   64,  164,    0,  169,
      167,  169,  166,  165,  168,  168,   64,  171,  167,  170,

      170,    0,   64,  167,  171,    0,   64,  166,    0,   64,
      167,  169,  166,   64,  170,  168,  169,  167,  169,  170,
        0,  168,  168,   64,  171,  167,  170,  170,  173,   64,
      167,    0,  173,   64,   65,   65,    0,  172,  169,  243,
      192,  170,  168,   65,  172,  244,  170,   65,  176,  174,
       65,  172,  173,  175,   65,  173,  174,  172,  174,  173,
      192,   65,   65,  175,  172,  176,  243,  192,  176,  174,
       65,  172,  244,  175,   65,  176,  174,   65,  172,  173,
      175,   65,   66,  174,  172,  174,   66,  192,  177,  245,
      175,  179,  176,   66,  180,  176,  174,    0,  246,   66,

      175,  247,  248,  177,  179,  179,   66,    0,  177,   66,
      180,  179,    0,   66,  180,  177,  245,    0,  179,    0,
       66,  180,  182,    0,  182,  246,   66,  251,  247,  248,
      177,  179,  179,   66,   69,  177,   69,  180,  179,   69,
      181,  180,    0,    0,  182,    0,   69,   69,  184,  182,
      181,  182,    0,    0,  251,  184,   69,    0,    0,  185,
      181,   69,    0,   69,  252,    0,   69,  181,  184,  187,
      186,  182,  185,   69,   69,  184,  187,  181,  254,  185,
      186,    0,  184,   69,   70,   70,  185,  181,   70,  187,
      186,  252,   70,  194,  188,  184,  187,  186,   70,  185,

        0,  255,  194,  187,  188,  254,  185,  186,   70,    0,
      190,   70,   70,  194,  188,   70,  187,  186,    0,   70,
      194,  188,  189,    0,  190,   70,    0,  190,  255,  194,
      190,  188,  189,  256,    0,   70,   71,  190,  257,  250,
      194,  188,  189,  250,  191,   71,  258,   71,  195,  189,
       71,  190,  195,  191,  190,    0,   71,  190,  191,  189,
      256,  196,  206,   71,  191,  257,  250,    0,  195,  189,
      250,  191,   71,  258,   71,  195,  259,   71,  260,  195,
      191,  196,  206,   71,  178,  191,  178,  178,  196,  206,
      211,  191,  198,  178,  211,  195,  197,  197,  198,    0,

      178,    0,  200,  259,    0,  260,  178,    0,  196,  206,
      211,  178,  198,  178,  178,  200,  197,  211,    0,  198,
      178,  211,  200,  197,  197,  198,  199,  178,  199,  200,
      199,  202,  201,  178,  183,    0,  183,  211,    0,  198,
      183,  201,  200,  197,    0,  203,  202,  183,  261,  200,
      199,  202,  201,  199,    0,  199,  183,  199,  202,  201,
      203,  183,  204,  183,  262,  203,    0,  183,  201,  204,
      205,  205,  203,  202,  183,  261,  263,  199,  202,  201,
      207,  207,  204,  183,  193,  193,    0,  203,    0,  204,
      205,  262,  203,  209,  193,  208,  204,  205,  205,  193,

      193,  207,    0,  263,    0,  193,  209,  207,  207,  204,
      208,  193,  193,  209,  210,  208,  212,  205,  210,    0,
      209,  193,  208,    0,  265,  212,  193,  193,  207,  213,
      266,  213,  193,  209,  267,  217,  212,  208,  210,  215,
      209,  210,  208,  212,  214,  210,  215,  214,  217,  213,
      216,  265,  212,    0,  215,  217,  213,  266,  213,  215,
      216,  267,  217,  212,  214,  210,  215,  268,  218,  221,
      216,  214,  218,  215,  214,  217,  213,  216,  220,    0,
      219,  215,  217,  219,    0,  220,  215,  216,  221,  221,
        0,  214,  218,  222,  268,  218,  221,  216,  220,  218,

        0,  222,  269,  219,  224,  220,  223,  219,  224,    0,
      219,  224,  220,  222,  226,  221,  221,  223,  226,  218,
      222,  225,  225,  228,  224,  220,  223,  229,  222,  269,
      219,  224,    0,  223,  226,  224,  228,  270,  224,  227,
      222,  226,  225,  228,  223,  226,  227,  229,  225,  225,
      228,  224,  227,  223,  229,  271,  230,  253,  272,  227,
      273,  226,  274,  228,  270,  275,  227,  276,  277,  225,
      228,  230,  253,  227,  229,  278,  230,  276,  280,  227,
      281,  282,  271,  230,  253,  272,  227,  273,  283,  274,
      284,  285,  275,  286,  276,  277,  288,  289,  230,  253,

      290,  291,  278,  230,  276,  280,  292,  281,  282,  293,
      294,  295,  296,  297,  298,  283,  300,  284,  285,  301,
      286,  302,  303,  288,  289,  305,  306,  290,  291,  308,
      309,  308,  310,  292,  312,  313,  293,  294,  295,  296,
      297,  298,  314,  300,  315,  316,  301,  317,  302,  303,
      318,    0,  305,  306,    0,  321,  308,  309,  308,  310,
      322,  312,  313,  323,  324,  325,  326,    0,  327,  314,
        0,  315,  316,    0,  317,  321,  328,  318,  327,  330,
      322,  330,  321,  323,  324,  325,  326,  322,  327,  407,
      323,  324,  325,  326,  328,  327,  328,  329,  332,    0,

      332,  330,  321,  328,  329,  327,  330,  322,  330,  331,
      323,  324,  325,  326,  333,  327,  407,  329,  334,    0,
      332,  328,  331,  328,  329,  332,  336,  332,  330,  331,
      333,  329,    0,  334,  333,  335,  331,    0,  334,  335,
      336,  333,  408,  337,  329,  334,  336,  332,  338,  331,
      340,  339,  338,  336,  340,  339,  331,  333,    0,  335,
      334,  333,  335,  337,  343,  334,  335,  336,  341,  408,
      337,  339,  338,  336,  340,  338,  409,  340,  339,  338,
        0,  340,  339,  341,  343,  342,  335,  342,  341,  344,
      337,  343,    0,    0,  345,  341,  347,  345,  339,  338,

      347,  340,  346,  409,  344,  348,    0,  342,    0,  344,
      341,  343,  342,  346,  342,  341,  344,  345,  351,  349,
      347,  345,  346,  347,  345,  348,    0,  347,  350,  346,
      352,  344,  348,  349,  342,  350,  344,    0,  351,  349,
      346,  410,    0,  353,  345,  351,  349,  347,  350,  346,
      352,  353,  348,  355,  354,  350,  355,  352,    0,    0,
      349,  354,  350,  353,  357,  351,  349,  357,  410,  356,
      353,    0,  359,  361,  354,  350,  355,  352,  353,  412,
      355,  354,  358,  355,  357,  356,  358,  359,  354,  356,
      353,  357,  359,  361,  357,  360,  356,  362,  363,  359,

      361,  354,  358,  355,    0,    0,  412,  365,    0,  358,
      360,  357,  356,  358,  359,  360,  356,  362,  363,  359,
      361,  364,  360,  365,  362,  363,  366,  365,  414,  358,
        0,  364,  367,    0,  365,  366,  368,  360,    0,    0,
      369,  364,  360,  415,  362,  363,  366,    0,  364,  416,
      365,  368,  367,  366,  365,  414,  368,  371,  364,  367,
      369,  371,  366,  368,  370,  370,  373,  369,  364,  372,
      415,  372,    0,  366,  374,  375,  416,  378,  368,  367,
      417,  371,  373,  368,  371,  370,  373,  369,  371,  372,
      374,  370,  370,  373,  374,  375,  372,  378,  372,  376,

      377,  374,  375,  379,  378,    0,  376,  417,  371,  373,
        0,  383,  370,  373,  377,  383,  372,  374,    0,  376,
      377,  374,  375,  379,  378,  380,  376,  377,  381,  384,
      379,  382,  384,  376,  385,  383,    0,  381,  383,  382,
      380,  377,  383,  386,    0,  380,  376,  377,  381,  384,
      379,  382,  380,  387,  385,  381,  384,    0,  382,  384,
        0,  385,  383,  386,  381,  388,  382,  380,  392,  389,
      386,  390,  380,  387,  418,  381,  384,  419,  382,  394,
      387,  385,  393,  388,  389,  388,  390,  391,  392,  389,
      386,  390,  388,  421,  391,  392,  389,  393,  390,  394,

      387,  418,  393,  395,  419,    0,  394,  391,    0,  393,
      388,  389,  388,  390,  391,  392,  389,    0,  390,  399,
      421,  391,  397,  395,  393,  396,  394,  398,  401,  393,
      395,  398,  397,    0,  391,  396,    0,  396,    0,  399,
        0,  402,  397,  402,  401,  396,  399,  400,  401,  397,
      395,  398,  396,    0,  398,  401,  400,  406,  398,  397,
      406,  403,  396,  402,  396,  404,  399,  400,  402,  397,
      402,  401,  396,  405,  400,  401,  422,  406,  398,  403,
      404,  403,  423,  400,  406,  404,  405,  406,  403,  424,
      402,  426,  404,  405,  400,  427,  428,  430,  431,  432,

      405,  433,  437,  422,  406,  438,  403,  404,  403,  423,
      440,  442,  404,  405,  443,  444,  424,  445,  426,  446,
      405,  448,  427,  428,  430,  431,  432,  453,  433,  437,
      454,  455,  438,  456,  458,  459,  460,  440,  442,  463,
      464,  443,  444,  465,  445,  466,  446,  467,  448,  469,
      470,  471,  474,  475,  453,  476,  477,  454,  455,  478,
      456,  458,  459,  460,  479,  480,  463,  464,  482,  483,
      465,    0,  466,  488,  467,    0,  469,  470,  471,  474,
      475,  485,  476,  477,  486,  487,  478,  489,  565,  491,
      566,  479,  480,  488,  485,  482,  483,  486,  487,  490,

      488,  485,  493,  490,  486,  487,    0,  489,  485,  491,
      493,  486,  487,  492,  489,  565,  491,  566,  567,  492,
      488,  485,  493,  490,  486,  487,  490,  495,  485,  493,
      490,  486,  487,  492,  489,  494,  491,  493,  496,  498,
      492,  497,  495,  499,  497,  567,  492,  495,  494,  493,
      490,  499,  496,  502,  495,  494,  500,  502,  496,  498,
      492,    0,  494,  499,  497,  496,  498,  503,  497,  495,
      499,  497,  500,  501,  495,  494,  500,  502,  499,  496,
      502,  507,  494,  500,  502,  496,  498,  503,  501,    0,
      499,  497,  505,  501,  503,  504,  505,  504,  506,  500,

      501,  507,    0,  500,  502,  506,    0,  569,  507,    0,
      508,  510,  505,  512,  503,  501,  509,  504,  506,  505,
      501,  508,  504,  505,  504,  506,  510,  509,  507,  513,
      508,  510,  506,  512,  569,  514,  509,  508,  510,  505,
      512,  516,  511,  509,  504,  506,  511,  515,  508,  513,
      517,  515,  516,  510,  509,  514,  513,  508,  510,    0,
      512,  516,  514,  509,  519,    0,  511,  521,  516,  511,
      517,  515,  518,  511,  515,  520,  513,  517,  515,  516,
        0,  518,  514,  522,  519,  520,  521,  521,  516,  525,
        0,  519,  518,  511,  521,  520,  522,  517,  515,  518,

        0,  527,  520,  522,  523,  524,  528,  524,  518,  525,
      522,  519,  520,  521,  521,  529,  525,  523,  530,  518,
      526,  527,  520,  522,  523,  524,  528,  526,  527,  532,
      522,  523,  524,  528,  524,  529,  525,  534,  530,  531,
      526,  533,  529,  535,  523,  530,  531,  526,  527,  532,
      534,  523,  524,  528,  526,  533,  532,  534,  536,  531,
        0,  533,  529,  535,  534,  530,  531,  526,  533,  539,
      535,  540,    0,  531,  537,  542,  532,  534,  536,  538,
        0,    0,  533,  542,  534,  536,  531,  537,  533,  539,
      535,  540,  538,  541,  537,  542,  539,  541,  540,  538,

        0,  537,  542,  570,    0,  536,  538,  544,  543,  545,
      542,  545,  546,  547,  537,  544,  539,  541,  540,  538,
      541,  537,  542,  543,  541,  548,  538,  544,  543,  548,
      570,  545,  546,  547,  544,  543,  545,  549,  545,  546,
      547,  550,  544,  551,  541,  548,    0,  554,    0,  553,
      543,  554,  548,  552,  544,  543,  548,  549,  545,  546,
      547,  550,  552,  551,  549,  553,  555,  557,  550,  553,
      551,  554,  548,  552,  554,  556,  553,  556,  554,  558,
      552,  555,  558,  559,  549,  560,  555,  557,  550,  552,
      551,  561,  553,  555,  557,  556,  553,  562,  554,  558,

      552,  560,  556,  559,  556,  560,  558,  571,  555,  558,
      559,  561,  560,  555,  557,  573,  574,  562,  561,  575,
      576,  578,  556,  579,  562,  580,  558,  581,  560,  582,
      559,  583,  560,  584,  571,  585,  587,  588,  561,  591,
      592,  593,  573,  574,  562,  597,  575,  576,  578,  598,
      579,  601,  580,  602,  581,  604,  582,  605,  583,  606,
      584,  607,  585,  587,  588,  608,  591,  592,  593,  610,
      611,  612,  597,  614,  615,  616,  598,    0,  601,  618,
      602,    0,  604,  619,  605,  620,  606,  621,  607,  623,
      622,  622,  608,    0,    0,  624,  610,  611,  612,  618,

      614,  615,  616,  619,  624,  620,  618,  621,  626,  623,
      619,  622,  620,  625,  621,  624,  623,  622,  622,  627,
      628,  629,  624,  625,  628,  629,  618,    0,  626,    0,
      619,  624,  620,  625,  621,  626,  623,  631,  622,  627,
      625,  632,  624,  633,  628,  629,  627,  628,  629,  630,
      625,  628,  629,  634,  635,  626,  630,  631,  633,  636,
      625,  632,  634,  633,  631,    0,  627,  637,  632,  630,
      633,  628,  629,  634,  635,  674,  630,  638,  641,  636,
      634,  635,  637,  630,  631,  633,  636,  637,  632,  634,
      633,  638,  644,    0,  637,  639,  630,  638,  641,  639,

      634,  635,  674,  640,  638,  641,  636,  643,  645,  637,
      640,  642,  644,  642,  637,  639,  675,    0,  638,  644,
      643,  646,  639,  640,  638,  641,  639,  643,  645,  647,
      640,  642,  649,  650,  643,  645,  646,  640,  642,  644,
      642,  646,  639,  675,  648,  651,  654,  643,  646,  647,
      640,  648,  649,  650,  643,  645,  647,  652,  642,  649,
      650,  652,  653,  646,  648,  651,  654,  655,  646,    0,
      656,  648,  651,  654,    0,  657,  647,  653,  648,  649,
      650,  652,  653,  656,  652,  658,  660,  655,  652,  653,
      656,  648,  651,  654,  655,  657,  659,  656,  661,  661,

      659,  660,  657,    0,  653,  658,  660,  662,  652,  653,
      656,  662,  658,  660,  655,  663,  664,  656,    0,  661,
      659,  665,  657,  659,  667,  661,  661,  659,  660,  663,
      668,  662,  658,  660,  662,  663,  664,  676,  662,  666,
      666,  665,  663,  664,  667,  669,  661,  659,  665,  670,
      668,  667,  677,  670,  679,  672,  663,  668,  662,  669,
      666,  680,  663,  664,  676,  669,  666,  666,  665,  681,
      671,  667,  669,  670,  671,  672,  670,  668,  684,  677,
      670,  679,  672,  689,  692,  694,  669,  666,  680,  696,
      698,  700,  669,  703,  671,  709,  681,  671,  710,  711,

      670,  671,  672,  713,  712,  684,    0,    0,    0,    0,
      689,  692,  694,  712,  714,  716,  696,  698,  700,  711,
      703,  671,  709,  713,  712,  710,  711,  753,  714,  715,
      713,  712,  718,  717,  714,  716,  715,    0,  720,  718,
      712,  714,  716,    0,  721,    0,  711,  717,  723,  715,
      713,  712,  718,  717,  753,  714,  715,  719,  720,  718,
      717,  714,  716,  715,  721,  720,  718,  722,  723,  722,
      724,  721,  719,  725,  717,  723,  715,  719,  726,  718,
      717,  728,  729,  727,  719,  720,  730,  731,    0,  722,
      724,  721,  727,  725,  722,  723,  722,  724,  726,  719,

      725,  728,  729,  727,  719,  726,  730,  731,  728,  729,
      727,  732,  733,  730,  731,  734,  722,  724,    0,  727,
      725,  735,  734,  736,  732,  726,  737,    0,  728,  729,
      727,  732,  733,  730,  731,  734,  739,  740,  732,  733,
      738,  735,  734,  736,    0,  741,  737,    0,  735,  734,
      736,  732,  741,  737,  738,  742,  739,  740,  732,  733,
      738,    0,  734,  739,  740,  741,  743,  738,  735,  744,
      736,  745,  741,  737,  746,  742,  756,  747,    0,  741,
      766,  738,  742,  739,  740,  767,  743,  738,  748,  744,
      747,  745,  741,  743,  746,  748,  744,  747,  745,  768,

      766,  746,  742,  756,  747,  767,    0,  766,  748,  769,
      770,  771,  767,  743,  772,  748,  744,  747,  745,  768,
      783,  746,  748,  774,  747,  773,  768,  766,  775,  769,
      770,  771,  767,  776,  772,  748,  769,  770,  771,  777,
      773,  772,  778,  774,  779,  773,  768,  783,  775,    0,
      774,    0,  773,  776,  780,  775,  769,  770,  771,  777,
      776,  772,  778,  781,  779,  782,  777,  773,  785,  778,
      774,  779,  773,  786,  780,  775,  788,    0,    0,    0,
      776,  780,  785,  781,    0,  782,  777,    0,  785,  778,
      781,  779,  782,  786,    0,  785,  788,    0,    0,    0,

      786,  780,    0,  788,    0,    0,    0,    0,    0,  785,
      781,    0,  782,    0,    0,  785,    0,    0,    0,    0,
      786,    0,    0,  788,  790,    0,    0,  790,  791,    0,
      791,  791,  793,    0,  793,  793,  794,    0,  794,  794,
      795,    0,  795,  795,  796,    0,  796,  796,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 2 "lexer.l"
#include "parser.h"
#include <stdio.h>
#define TOKEN(name) { return SQL_##name; }
char* substr(const char* source, int from, int to) {
    int len = to-from;
    char* copy = new char[len+1];
    strncpy(copy, source+from, len);
    copy[len] = '\0';
    return copy;
}

#line 1416 "lexer.cpp"

#define INITIAL 0
#define COMMENT 1

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int sql_lex_init (yyscan_t* scanner);

int sql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int sql_lex_destroy (yyscan_t yyscanner );

int sql_get_debug (yyscan_t yyscanner );

void sql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE sql_get_extra (yyscan_t yyscanner );

void sql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *sql_get_in (yyscan_t yyscanner );

void sql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *sql_get_out (yyscan_t yyscanner );

void sql_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t sql_get_leng (yyscan_t yyscanner );

char *sql_get_text (yyscan_t yyscanner );

int sql_get_lineno (yyscan_t yyscanner );

void sql_set_lineno (int line_number ,yyscan_t yyscanner );

int sql_get_column  (yyscan_t yyscanner );

void sql_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * sql_get_lval (yyscan_t yyscanner );

void sql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *sql_get_lloc (yyscan_t yyscanner );
    
        void sql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int sql_wrap (yyscan_t yyscanner );
#else
extern int sql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int sql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int sql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 26 "lexer.l"

#line 1659 "lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			sql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				sql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		sql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 790 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 789 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 29 "lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 30 "lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 53 "lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 54 "lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 55 "lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 56 "lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 57 "lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 58 "lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 59 "lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 60 "lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 61 "lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 62 "lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 63 "lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 64 "lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 65 "lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 66 "lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 67 "lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 68 "lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 70 "lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 71 "lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 72 "lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 73 "lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 75 "lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 76 "lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 77 "lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 78 "lexer.l"
TOKEN(INNER)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 79 "lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 80 "lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 81 "lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 83 "lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 84 "lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 85 "lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 86 "lexer.l"
TOKEN(UNION)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 87 "lexer.l"
TOKEN(USING)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 88 "lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 89 "lexer.l"
TOKEN(CHECK)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 90 "lexer.l"
TOKEN(CALL)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 91 "lexer.l"
TOKEN(DATE)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 "lexer.l"
TOKEN(DESC)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 "lexer.l"
TOKEN(DROP)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 "lexer.l"
TOKEN(FILE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 "lexer.l"
TOKEN(FROM)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 "lexer.l"
TOKEN(FULL)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 "lexer.l"
TOKEN(HASH)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 "lexer.l"
TOKEN(HINT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "lexer.l"
TOKEN(INTO)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 "lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 "lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 "lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 "lexer.l"
TOKEN(NULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 "lexer.l"
TOKEN(PART)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 "lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 "lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 "lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "lexer.l"
TOKEN(TIME)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 "lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 111 "lexer.l"
TOKEN(WITH)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 112 "lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 113 "lexer.l"
TOKEN(ADD)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "lexer.l"
TOKEN(ALL)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "lexer.l"
TOKEN(AND)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "lexer.l"
TOKEN(ASC)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "lexer.l"
TOKEN(CSV)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "lexer.l"
TOKEN(FOR)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 119 "lexer.l"
TOKEN(INT)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 120 "lexer.l"
TOKEN(KEY)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 121 "lexer.l"
TOKEN(NOT)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 122 "lexer.l"
TOKEN(OFF)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 123 "lexer.l"
TOKEN(SET)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 124 "lexer.l"
TOKEN(TBL)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 125 "lexer.l"
TOKEN(TOP)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 126 "lexer.l"
TOKEN(USE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 127 "lexer.l"
TOKEN(AS)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 128 "lexer.l"
TOKEN(BY)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 129 "lexer.l"
TOKEN(IF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 130 "lexer.l"
TOKEN(IN)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 131 "lexer.l"
TOKEN(IS)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 132 "lexer.l"
TOKEN(OF)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 133 "lexer.l"
TOKEN(ON)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 134 "lexer.l"
TOKEN(OR)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 135 "lexer.l"
TOKEN(TO)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 136 "lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 137 "lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 138 "lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 114:
#line 141 "lexer.l"
case 115:
YY_RULE_SETUP
#line 141 "lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 145 "lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 149 "lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 154 "lexer.l"
{
	yylval->sval = _strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 158 "lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 163 "lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 164 "lexer.l"
ECHO;
	YY_BREAK
#line 2363 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * sql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( sql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of sql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					sql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			sql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) sql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 790 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 790 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 789);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					sql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( sql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void sql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        sql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            sql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	sql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	sql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void sql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		sql_pop_buffer_state();
	 *		sql_push_buffer_state(new_buffer);
     */
	sql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	sql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (sql_wrap()) processing, but the only time this flag
	 * is looked at is after sql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void sql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE sql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) sql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in sql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) sql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in sql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	sql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with sql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void sql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		sql_free((void *) b->yy_ch_buf ,yyscanner );

	sql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a sql_restart() or at EOF.
 */
    static void sql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	sql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then sql__init_buffer was _probably_
     * called from sql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void sql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		sql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void sql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	sql_ensure_buffer_stack(yyscanner);

	/* This block is copied from sql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from sql__switch_to_buffer. */
	sql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void sql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	sql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		sql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void sql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)sql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in sql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)sql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in sql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE sql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) sql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in sql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	sql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to sql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       sql__scan_bytes() instead.
 */
YY_BUFFER_STATE sql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return sql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to sql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE sql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) sql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in sql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = sql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in sql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE sql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int sql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int sql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *sql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *sql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t sql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *sql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void sql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void sql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "sql_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void sql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "sql_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see sql__switch_to_buffer
 */
void sql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void sql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int sql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void sql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * sql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void sql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *sql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void sql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* sql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int sql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) sql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* sql_lex_init_extra has the same functionality as sql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to sql_alloc in
 * the yyextra field.
 */

int sql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    sql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) sql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    sql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from sql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * sql_lex_init()
     */
    return 0;
}

/* sql_lex_destroy is for both reentrant and non-reentrant scanners. */
int sql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		sql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		sql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	sql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        sql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * sql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    sql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *sql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *sql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void sql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see sql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 163 "lexer.l"


int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
